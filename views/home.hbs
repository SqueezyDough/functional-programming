<h1>Graph</h1>

<h1>D3 Bubble Chart (with Static Data)</h1>

<section id="graph"></section>

<p>Also, see the <a href="https://codepen.io/girliemac/pen/qFGtw">animated version of this chart</a>, using realtime data!</p>
<p>Full source code is distributed under MIT license on <a href="https://github.com/pubnub/d3-bubble">Github</a>.</p>

<p>Author: <a href="https://twitter.com/girlie_mac">@girlie_mac</a></p>

<script src="https://d3js.org/d3.v3.min.js"></script>
<script>

let data = []
let xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
    if (this.readyState === 4 && this.status === 200) {
      data = JSON.parse(this.responseText);

      drawGraph(data)
    }
};
xhr.open("GET", `/fetch`, true);
xhr.send();

function drawGraph(json) {

  // Fake JSON data
  var json = {"countries_msg_vol": {
    "CA": 170, "US": 100, "BB": 12, "CU": 9
  }};

	// D3 Bubble Chart

	var diameter = 600;

	var svg = d3.select('#graph').append('svg')
					.attr('width', diameter)
					.attr('height', diameter);

	var bubble = d3.layout.pack()
				.size([diameter, diameter])
				.value(function(d) {return d.size;})
         // .sort(function(a, b) {
				// 	return -(a.value - b.value)
				// })
				.padding(3);

  // generate data with calculated layout values
  var nodes = bubble.nodes(processData(json))
						.filter(function(d) { return !d.children; }); // filter out the outer bubble

  var vis = svg.selectAll('circle')
					.data(nodes);

  vis.enter().append('circle')
			.attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })
			.attr('r', function(d) { return d.r; })
			.attr('class', function(d) { return d.className; });

  function processData(data) {
    var obj = data.countries_msg_vol;

    var newDataSet = [];

    for(var prop in obj) {
      newDataSet.push({name: prop, className: prop.toLowerCase(), size: obj[prop]});
    }
    return {children: newDataSet};
  }

}

</script>